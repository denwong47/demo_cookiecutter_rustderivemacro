var searchIndex = JSON.parse('{\
"demo_cookiecutter_rustderivemacro":{"doc":"This library provides a simple derive macro to map Enum …","t":[8,24,0,0,10,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,8,24,0,10,4,13,13,13],"n":["DemoDerive","DemoDerive","errors","prelude","test_demo_cookiecutter_rustderivemacro","DemoDeriveError","SampleError","SynParseError","Unknown","borrow","borrow_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","DemoDerive","DemoDerive","errors","test_demo_cookiecutter_rustderivemacro","DemoDeriveError","SampleError","SynParseError","Unknown"],"q":["demo_cookiecutter_rustderivemacro","","","","","demo_cookiecutter_rustderivemacro::errors","","","","","","","","","","","","","","","demo_cookiecutter_rustderivemacro::prelude","","","","demo_cookiecutter_rustderivemacro::prelude::errors","","",""],"d":["Sampl Trait to be implemented.","A simple derive macro to demonstrate the output of …","","","Test function to check if macro works.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Sampl Trait to be implemented.","A simple derive macro to demonstrate the output of …","","Test function to check if macro works.","","","",""],"i":[0,0,0,0,9,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,9,0,2,2,2],"f":[0,0,0,0,[[],1],0,0,0,0,[[]],[[]],[[2,3],[[5,[4]]]],[[2,3],[[5,[4]]]],[[]],[[]],[6],[[],7],[[],5],[[],5],[[],8],0,0,0,[[],1],0,0,0,0],"p":[[15,"i32"],[4,"DemoDeriveError"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"DemoDerive"]]},\
"demo_cookiecutter_rustderivemacro_macros":{"doc":"","t":[24],"n":["DemoDerive"],"q":["demo_cookiecutter_rustderivemacro_macros"],"d":["A simple derive macro to demonstrate the output of …"],"i":[0],"f":[0],"p":[]},\
"demo_cookiecutter_rustderivemacro_types":{"doc":"","t":[8,0,10,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11],"n":["DemoDerive","errors","test_demo_cookiecutter_rustderivemacro","DemoDeriveError","SampleError","SynParseError","Unknown","borrow","borrow_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id"],"q":["demo_cookiecutter_rustderivemacro_types","","","demo_cookiecutter_rustderivemacro_types::errors","","","","","","","","","","","","","",""],"d":["Sampl Trait to be implemented.","","Test function to check if macro works.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,9,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,0,[[],1],0,0,0,0,[[]],[[]],[[2,3],4],[[2,3],4],[[]],[[]],[5],[[],6],[[],7],[[],7],[[],8]],"p":[[15,"i32"],[4,"DemoDeriveError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"DemoDerive"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
